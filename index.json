[{"content":"","date":"3 February 2024","permalink":"/posts/","section":"Posts","summary":"","title":"Posts"},{"content":"","date":"3 February 2024","permalink":"/tags/qa/","section":"Tags","summary":"","title":"qa"},{"content":"Dalam episod sebelum ni kita dah setup our Laravel endpoint dan jugak our first test.\nKali ni kita nak tambah test untuk endpoint kita yang ke-2\nPOST /api/rockets\nBoleh tambah roket dalam pipeline Bukak tests/Feature/RocketTest.php yang kita dah generate haritu dan tambah the following test\nclass RocketTest extends TestCase { use RefreshDatabase; // ..previous tests public function test_can_post_api_rockets(): void { // Send a POST request to the endpoint $response = $this-\u0026gt;post(\u0026#39;/api/rockets\u0026#39;, [ \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;Test Rocket\u0026#39;, \u0026#39;status\u0026#39; =\u0026gt; \u0026#39;preparing\u0026#39;, ]); // Checks if it returns 201 status code aka success $response-\u0026gt;assertStatus(201); // Second check if in the database there is a rocket with the name we gave earlier $this-\u0026gt;assertDatabaseHas(\u0026#39;rockets\u0026#39;, [\u0026#39;name\u0026#39; =\u0026gt; \u0026#39;Test Rocket\u0026#39;]); } } Cuba run test. Boleh guna --filter untuk only run test yang kita nak\nvendor/bin/phpunit --filter test_can_post_api_rockets Success.\nNext kita tambah pulak test untuk the final endpoint\nPUT /api/rockets/{rocket}\nBoleh lancarkan roket Lagi sekali bukak tests/Feature/RocketTest.php dan tambah the following test pulak\nclass RocketTest extends TestCase { use RefreshDatabase; // ..previous tests public function test_can_put_api_rockets(): void { // Setup test rocket with initial status of \u0026#34;preparing\u0026#34; $rocket = Rocket::factory()-\u0026gt;create([ \u0026#39;name\u0026#39; =\u0026gt; \u0026#39;Test Rocket\u0026#39;, \u0026#39;status\u0026#39; =\u0026gt; \u0026#39;preparing\u0026#39;, ]); // Send a PUT request to the endpoint and change status to \u0026#34;ready to launch\u0026#34; $response = $this-\u0026gt;put(\u0026#34;/api/rockets/{$rocket-\u0026gt;id}\u0026#34;, [ \u0026#39;status\u0026#39; =\u0026gt; \u0026#39;ready to launch\u0026#39;, ]); // Checks if it returns 200 status code aka success $response-\u0026gt;assertStatus(200); // Second check if in the database there is a rocket with the new status $this-\u0026gt;assertDatabaseHas(\u0026#39;rockets\u0026#39;, [\u0026#39;status\u0026#39; =\u0026gt; \u0026#39;ready to launch\u0026#39;]); } } Run test for this endpoint pulak\nvendor/bin/phpunit --filter test_can_put_api_rockets Green.\nFinally run semua test.\nvendor/bin/phpunit Semua hijau. Syukurr.\nNow tinggal satu je benda. Kita nak matchkan the original instruction dengan nama-nama yang kita guna untuk test method kita.\nIdeally each \u0026ldquo;acceptance test\u0026rdquo; should have some kind of index. Something like F01, F02 or something.\nTengok balik senarai acceptance test yang kita dapat dari boss kita haritu.\nBoleh senaraikan semua roket along with their status (preparing, ready to launch, hit, missed) Boleh tambah roket dalam pipeline Boleh lancarkan roket Ni pulak senarai test method yang aku dah siap rename so that next time nak cari hubungkait tak berapa nak struggle.\npublic function test_01_boleh_senaraikan_semua_roket_along_with_their_status {} public function test_02_boleh_tambah_roket_dalam_pipeline {} public function test_03_boleh_lancarkan_roket {} Any document selalunya is a living document. So most probably wording untuk acceptance test tu akan berubah. Tapi at least numbering tu tak berubah so kita boleh refer numbering dia je.\nMostly test kita so far only cover whether an endpoint returns benda yang sepatutnya dia return.\nAda banyak lagi benda kita boleh test:\nAuthorization Test - Adakah endpoint tu boleh diakses oleh Role yang sepatutnya Validation Test - Adakah endpoint tu boleh handle kepelbagaian input yang tidak sepatutnya dan yang sepatutnya Performance Test - Adakah endpoint boleh handle high workload. Ni pun boleh pecah lagi kalau nak. Test whether system boleh meet minimum performance standard (load test). Test max out workload nak tengok break kat mana (stress test). Test kalau spike tiba-tiba boleh handle tak (spike test). Test kalau normal workload tapi long running (endurance test). Ok itu sahaja untuk posting kali ni. Hopefully kita boleh cover test-test lain lepas ni. Jumpa lagi.\n","date":"3 February 2024","permalink":"/posts/20240203-qa-dan-testing-dengan-laravel-dan-phpunit-bahagian-2/","section":"Posts","summary":"Dalam episod sebelum ni kita dah setup our Laravel endpoint dan jugak our first test.\nKali ni kita nak tambah test untuk endpoint kita yang ke-2\nPOST /api/rockets\nBoleh tambah roket dalam pipeline Bukak tests/Feature/RocketTest.","title":"QA dan Testing dengan Laravel dan PHPUnit - Bahagian 2"},{"content":"","date":"3 February 2024","permalink":"/","section":"rsmn","summary":"","title":"rsmn"},{"content":"","date":"3 February 2024","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":"Quality control is a vital step in any manufacturing process. Can\u0026#39;t imagine this being an easy job mentally. Hats off to this woman. pic.twitter.com/aVhSGCZG67\n\u0026mdash; Quantum Voyager (@QuantumVoyages) January 28, 2024 Harini aku nak ajar korang pasal testing or some people call it QA.\nNi steps yang kita akan buat\nSediakan several simple Laravel API endpoints for testing Tambah test. Run the test. Semua steps ni kita akan jayakan dengan menggunakan replit.\n#1 Sediakan several simple Laravel API endpoints for testing # First skali kita kena ada benda yang kita nak test dulu.\nNow just imagine kita ada satu sistem utk lepaskan roket ke sasaran musuh.\nSo boss ckp,\nok Man, ko skang in caj utk make sure 3 feature ni berfungsi.\nBoleh senaraikan semua roket along with their status (preparing, ready to launch, hit, missed) Boleh tambah roket dalam pipeline Boleh lancarkan roket Aku dah prepare endpoint ni korang just fork je. To do that kena create akaun replit dulu.\nCreate akaun replit.com # So first skali, pergi ke replit.com dan klik Sign Up.\nLepas tu korang klik repo yang aku dah buatkan ni.\nhttps://replit.com/@rsmn/rocketlauncher?v=1\nKlik Fork \u0026amp; Run saja.\nThese are the endpoints for those yang curious.\n// routes/api.php // GET /api/rockets Route::get(\u0026#39;rockets\u0026#39;, function () { return App\\Models\\Rocket::all(); }); // POST /api/rockets Route::post(\u0026#39;rockets\u0026#39;, function (Request $request) { $rocket = new Rocket(); $rocket-\u0026gt;name = $request-\u0026gt;name; $rocket-\u0026gt;status = $request-\u0026gt;status; $rocket-\u0026gt;save(); return response()-\u0026gt;json($rocket, 201); }); // PUT /api/rockets/{rocket} Route::put(\u0026#39;rockets/{rocket}\u0026#39;, function (Request $request, Rocket $rocket) { $rocket-\u0026gt;status = $request-\u0026gt;status; $rocket-\u0026gt;save(); return response()-\u0026gt;json($rocket, 200); }); #2 Tambah test # Next kita tambah test. Kita start dengan first endpoint dulu\nGET /api/rockets\nBoleh senaraikan semua roket along with their status (preparing, ready to launch, hit, missed) Sebelum kita tambah test, kita buat manual test dulu.\nTekan Run jika belum. Dan klik butang New tab\nBrowser akan buka new tab. URL dia akan lebih kurang rupa macam ni\nhttps://25c234b0-e762-4949-919d-853de8d2bd13-00-18j3aexydlz9p.sisko.replit.dev/\nTambah api/rockets kat belakang dan klik Enter untuk pergi ke URL tersebut\nhttps://25c234b0-e762-4949-919d-853de8d2bd13-00-18j3aexydlz9p.sisko.replit.dev/api/rockets\nSuccess.\nSkang kita nak automate proses \u0026ldquo;bukak browser dan klik URL\u0026rdquo; ni.\nGenerate test dulu. Run kat shell.\nphp artisan make:test RocketTest Buka test tersebut ie tests/Feature/RocketTest.php dan define it as follow. Jangan lupa bubuh use RefreshDatabase tu ye. Benda tu make sure every time kita test kita run migration.\nclass RocketTest extends TestCase { use RefreshDatabase; public function test_can_get_api_rockets(): void { $response = $this-\u0026gt;get(\u0026#39;/api/rockets\u0026#39;); $response-\u0026gt;assertStatus(200); } } Sebelum boleh test, adjust dulu phpunit.xml dan make sure dua value ni seperti di bawah. Benda ni untuk bagi testing kita run guna SQLite dan in memory. So ringan dan pantas.\n\u0026lt;env name=\u0026#34;DB_CONNECTION\u0026#34; value=\u0026#34;sqlite\u0026#34;/\u0026gt; \u0026lt;env name=\u0026#34;DB_DATABASE\u0026#34; value=\u0026#34;:memory:\u0026#34;/\u0026gt; #3 Run the test # Akhirnya saat yang ditunggu-tunggu.\nRun the magic command. Buka shell dan run\nvendor/bin/phpunit Akhirnya \u0026#x1f62d;\nNota: Bilangan test success anda mungkin lain dengan screenshot sebab saya dah buang default test that comes with Laravel ie tests/Feature/ExampleTest.php dan tests/Unit/ExampleTest.php\nOk selesai endpoint 1. Next post kita test endpoint ke 2 pulak.\nJumpa lagi ya harap tak perlu tunggu 3 tahun untuk posting seterusnya.\n","date":"30 January 2024","permalink":"/posts/20240130-qa-dan-testing-laravel-dan-phpunit/","section":"Posts","summary":"Quality control is a vital step in any manufacturing process. Can\u0026#39;t imagine this being an easy job mentally. Hats off to this woman. pic.twitter.com/aVhSGCZG67\n\u0026mdash; Quantum Voyager (@QuantumVoyages) January 28, 2024 Harini aku nak ajar korang pasal testing or some people call it QA.","title":"QA dan Testing dengan Laravel dan PHPUnit - Bahagian 1"},{"content":" Secara ideal kita memerlukan peranan-peranan yang berikut sekurang-kurangnya dalam sebuah syarikat yang menghasilkan aplikasi:\nPembangun/Pengaturcara (Developer/Programmer) Pereka UI/UX atau Pereka Produk (UI/UX Designer/Product Designer) Pengurus Produk atau Penganalisa Perniagaan (Product Manager/Business Analyst) (Boleh rujuk hantaran 3 tahun lepas)\nBagi syarikat yang bermodal kecil dan baru sahaja memulakan perniagaan, menggajikan seorang staf adalah suatu yang besar dan memerlukan perkiraan yang terperinci. Apatah lagi nak menggajikan 3 orang.\nJadi apa yang berlaku selalunya adalah syarikat akan menggajikan 1 orang sahaja dan ketiga-tiga peranan tersebut perlu diisi dan dimainkan olehnya. Belanja ikut kemampuan jadi ia tindakan yang logik.\nSatu lagi pemerhatian saya adalah kebiasaannya pengaturcara tidak mempunyai kemahiran mereka bentuk yang baik. Dari segi UI/UX secara lalai (by default) selalunya tidak up to standard. Saya tidak menyalahkan sesiapa dan hanya menyatakan pemerhatian sahaja. Ia adalah pemerhatian yang adil kerana bakat mereka bentuk memang amat sukar dicari. Dalam satu kelas waktu kita di bangku sekolah dahulu boleh kira dengan jari kawan-kawan yang pandai melukis.\nNamun tidak perlu dibimbangkan kerana di luar sana terdapat jalan pintas (shortcut) yang boleh diambil.\nBerikut saya senaraikan jalan pintas berdasarkan pengalaman saya:\n1. Pustaka CSS # Shortcut pertama adalah pustaka CSS.\nMujurlah ada kerangka dan pustaka CSS seperti Bootstrap. Dengan hanya menggunakan senarai class yang disediakan, anda boleh menjadikan elemen HTML anda tampak lebih kemas.\nPerbezaan Button dengan Bootstrap CSS 2. Tema (Theme) dan Templat (Template) yang dibina berasaskan pustaka CSS # Shortcut kedua adalah tema/templat yang dibina berasaskan pustaka CSS.\nJika anda pernah mendengar tentang laman web seperti Themeforest, anda akan dapati pembangun frontend di serata dunia banyak menghasilkan theme berasaskan Bootstrap yang sedia boleh diguna pakai oleh pembangun backend yang buta reka bentuk.\nHarga untuk setiap templat yang ditawarkan biasanya sekitar USD30-60. Pada pendapat saya ia adalah harga yang agak berpatutan berbanding nilai keseluruhan projek, atau pun berbanding duit yang anda perlu keluarkan untuk menggajikan seorang Pereka Produk (Product Designer).\nContoh tangkap layar templat OneUI Dengan tersedianya komponen-komponen UI, kerja yang tinggal adalah menyusun komponen-komponen tersebut sehingga mencapai UX yang tidak menyakitkan hati.\n3. Pustaka komponen dan pattern # Shortcut ketiga (kadangkala ada dalam tema/templat tapi tak banyak atau tak cukup) adalah membina komponen dan pattern library sendiri.\nAnda boleh mengambil inspirasi daripada laman-laman web pemain-pemain besar dalam industri. Saya juga biasa menggunakan perkhidmatan aggregator untuk mempelajari pattern yang biasa digunakan untuk mencapai sesuatu tujuan UX.\nAntara laman pengumpul (aggregator) yang saya sarankan:\nnicelydone.club - Mengumpul pattern SaaS yang biasanya anda hanya boleh akses apabila anda melanggan SaaS tersebut. Dengan melanggan nicelydone, saya tak perlu langgan setiap SaaS tersebut untuk mempelajari pattern yang mereka gunakan. pageflows.com - Mengumpul pattern SaaS dalam bentuk video. Idea ni bagus. Mereka rakam skrin mereka untuk setiap flow yang biasa wujud dalam sesebuah SaaS. Jadi berbanding anda melihat gambar statik seperti nicelydone, anda boleh tengok video. Lagi banyak maklumat anda boleh perolehi dengan menonton video berbanding dengan melihat gambar. pttrns.com - Sama seperti nicelydone tapi nampak macam lebih memberi fokus kepada aplikasi mudah alih (mobile). mobbin.design - Sama seperti pttrns. Para pembangun boleh menggunakan koleksi pattern UI/UX sedia ada dalam senarai di atas untuk mengelakkan penghasilan UX yang menyakitkan hati. Dan saya juga menyarankan anda kumpul sebanyak mungkin koleksi pattern ini dan bila tiba masa kita boleh cherry pick sahaja daripadanya.\n4. Code Snippets # Shortcut keempat adalah dengan mengguna pakai fungsi code snippet dalam IDE (VSCode, Sublime Text, Vim etc) kegemaran anda.\nSekiranya anda mempunyai koleksi komponen UI dan pattern sendiri, adalah lebih pantas sekiranya anda dapat menterjemahkan komponen-komponen tersebut kepada code snippet.\nBagi yang tidak biasa dengan fungsi ini, code snippet adalah satu fungsi di mana anda hanya perlu menaip shortcut huruf sahaja dan kemudian anda hanya perlu menekan butang tab dan IDE anda akan terus mengeluarkan kod penuh yang telah anda tetapkan. Ibarat menggunakan fungsi autocomplete pada enjin carian Google.\nContoh code snippet Emmet yang biasa terdapat dalam IDE Dengan memanfaatkan jalan pintas yang telah saya senaraikan tadi, saya harap ia dapat membantu sedikit sebanyak mengurangkan kepenatan para pembangun backend dalam usaha memerah otak untuk menghasilkan UI/UX yang tidak menyakitkan hati.\nNanti bila syarikat dah berkembang lebih besar, ada duit lebih sikit maka lebih baik gajikan staf tambahan untuk menampung tugasan-tugasan lain yang dipikul oleh pembangun tadi.\np/s: Kalau ada pereka produk yang nak menyertai syarikat kami boleh hantar resume ke rusman@technerve.my\n","date":"30 November 2021","permalink":"/posts/20211130-memudahkan-kerja-pengaturcara-backend/","section":"Posts","summary":"Secara ideal kita memerlukan peranan-peranan yang berikut sekurang-kurangnya dalam sebuah syarikat yang menghasilkan aplikasi:\nPembangun/Pengaturcara (Developer/Programmer) Pereka UI/UX atau Pereka Produk (UI/UX Designer/Product Designer) Pengurus Produk atau Penganalisa Perniagaan (Product Manager/Business Analyst) (Boleh rujuk hantaran 3 tahun lepas)","title":"Memudahkan kerja pengaturcara backend"},{"content":"","date":"16 February 2021","permalink":"/tags/aplikasi/","section":"Tags","summary":"","title":"aplikasi"},{"content":"","date":"16 February 2021","permalink":"/tags/keperluan-pengguna/","section":"Tags","summary":"","title":"keperluan pengguna"},{"content":"Sepanjang proses mencungkil keperluan pengguna (eliciting user requirements) untuk menghasilkan aplikasi tersuai, bacaan saya adalah kebanyakan pengguna tahu secara kasar apa mereka mahu. Masalah yang dihadapi biasanya mudah untuk diceritakan. Tapi tidak ramai yang tahu secara terperinci bentuk solusi yang diinginkan.\nAda pembuat aplikasi yang mengenakan caj untuk proses konsultasi bagi menghasilkan dokumen keperluan pengguna, terutamanya bagi projek yang ultra besar dan ultra rumit. Ada juga yang memberikan secara percuma (atau mungkin diserap dalam kos akhir).\nthe devil is in the detail.\nBenarlah kata pujangga, \u0026ldquo;syaitannya adalah pada butiran terperinci\u0026rdquo;.\nSaya nak bawa satu senario yang mungkin anda sendiri pernah hadapi.\nKlien anda, pemilik francais kedai gunting rambut ternama datang berjumpa dengan anda.\nKlien: \u0026ldquo;Bro, saya nak sistem yang pelanggan boleh guna untuk buat temujanji sesi gunting rambut.\u0026rdquo;\nLangkah seterusnya, kita buat anggaran harga/quotation. Kita buat juga prototaip asas untuk tunjuk pada klien.\nHalaman untuk buat temujanji kita akan buat borang. Ada ruangan untuk isi nama, tarikh, dan masa. Kemudian ada butang Hantar.\n----------------------- |\t| | Nama __________ | |\t| | Tarikh __________ | | Masa __________ | |\t| |\t[ Hantar ] | ----------------------- Anggaran masa: 2 minggu.\nAnggaran harga: RM3,000.\nSeterusnya kita demo prototaip kepada klien beserta anggaran masa/harga.\nKlien: \u0026ldquo;Ok. Boleh tak dalam borang ni tambahkan ruangan untuk simpan maklumat jenis perkhidmatan yang nak diambil, samada gunting rambut sahaja, cukur, atau basuh rambut sekali?\u0026rdquo;\nKita salin maklumbalas klien dan kembali semula ke papan lukis, tambah dropdown/pilihan untuk memilih servis.\n----------------------- |\t| | Nama __________ | |\t| | Tarikh __________ | | Masa __________ | |\t| | Servis [------v-] | |\t| |\t[ Hantar ] | ----------------------- Anggaran masa: 3 minggu.\nAnggaran harga: RM4,000.\nTunjuk pada klien.\nKlien: \u0026ldquo;Terbaik.\u0026rdquo;\nKlien ni biasanya pemilik perniagaan. Kadangkala ada yang tidak bergelumang dengan operasi.\nBila bawa prototaip pada staf yang terlibat dengan operasi,\nKlien (staf operasi): \u0026ldquo;Encik pembangun, boleh tak dekat dropdown Servis ni, kalau kita nak pilih Servis yang masih belum ada, kita boleh tambah terus kat situ? Tak payah nak kena pegi laman tetapan (settings) untuk tambah Servis baharu.\u0026rdquo;\nKita salin maklumbalas klien dan kembali semula ke papan lukis, tambah pautan untuk terus boleh tambah servis baharu di dalam prototaip.\n----------------------- |\t| | Nama __________ | |\t| | Tarikh __________ | | Masa __________ | |\t| | Servis [------v-] | |\tServis A\t| |\tServis B\t| |\tServis C\t| |\t[Tambah +]\t| |\t| |\t[ Hantar ] | ----------------------- Anggaran masa: 5 minggu.\nAnggaran harga: RM6,000.\nAdakah anda pernah mengalami situasi sebegini?\nCuba kita bedah situasi ini bersama dan kenal pasti jika ada jalan pintas agar tak perlu ada mundar-mandir yang sebenarnya boleh dielakkan.\nBiasanya dalam sebuah syarikat pembangun aplikasi, paling asas kena ada dua pasukan. Pasukan produk (Product team) dan pasukan teknikal (Engineering team).\nSalah satu peranan yang perlu diisi dalam pasukan produk adalah Penganalisis Perniagaan (Business Analyst/BA). Secara asas, BA berperanan untuk menganalisa keperluan pengguna dan menterjemahkannya kepada senarai tugasan yang akan diserahkan kepada pengaturcara.\nBA yang berpengalaman akan mampu mengekstrak sebanyak mungkin maklumat pada pertemuan pertama.\nAntara perkara yang boleh diminta dari klien adalah cara kerja atau solusi yang sedang digunakan samada menggunakan Microsoft Excel atau mana-mana perisian lain. Dari situ kita boleh lihat struktur data dan boleh terus tangkap semua maklumat yang diperlukan.\nBA akan bawa input yang diterima ke dalam perbincangan bersama pasukan produk. Dalam pasukan produk ada peranan-peranan lain seperti Perekabentuk UI/UX dan Pengurus Produk/Projek. Perekabentuk UI/UX yang berpengalaman akan mampu empati dengan pengguna dan seterusnya menghasilkan aliran UX yang lancar (ie fitur terus tambah Servis baharu di laman yang sama).\nSemakin \u0026ldquo;simple\u0026rdquo; UX aplikasi yang dihasilkan, boleh jadi semakin kompleks enjin yang diperlukan untuk menghasilkannya (ie cuba mempertahankan kenaikan anggaran harga dari 4k ke 6k).\nBila berurusan dengan manusia memang begitulah adat resamnya. Sifatnya dinamik dan sentiasa berubah. Yang penting perlu ada empati yang tinggi dan dalam masa yang sama pastikan semuanya direkodkan agar boleh mengelakkan perayapan skop ( scope creep).\nNota: Technerve sedang mencari Business Analyst dan UI/UX Designer FB Technerve\n","date":"16 February 2021","permalink":"/posts/20210216-membedah-keperluan-pengguna/","section":"Posts","summary":"Sepanjang proses mencungkil keperluan pengguna (eliciting user requirements) untuk menghasilkan aplikasi tersuai, bacaan saya adalah kebanyakan pengguna tahu secara kasar apa mereka mahu. Masalah yang dihadapi biasanya mudah untuk diceritakan. Tapi tidak ramai yang tahu secara terperinci bentuk solusi yang diinginkan.","title":"Membedah Keperluan Pengguna"},{"content":"Kalau saya tanya berapa harga kereta Myvi, mungkin ramai yang boleh beritahu saya harganya sekarang. Tetapi kalau saya tanya berapa harga kalau nak mintak kereta yang ada enjin Proton Preve, interior Honda City, sistem brek Perodua Myvi, dan gabungan beberapa lagi jenama lain, pasti sukar nak meneka harga.\nKesukaran meneka harga ini bukanlah sesuatu yang mengejutkan. Sekarang kalau anda tanya pula mereka yang pakar dalam bidang automotif, pasti mereka tahu untuk mengagak harga kereta gabungan ini.\nDan saya pasti harganya lebih mahal. Sesuatu barangan yang dikeluarkan secara besar-besaran (mass produce) akan mempunyai harga yang lebih rendah berbanding sesuatu yang ditempah khas/tersuai (custom made).\nMass production berlaku dengan bantuan automatsi (automation). Automation bermaksud kurang tenaga pekerja diperlukan maka diterjemah kepada pengurangan kos.\nBegitu juga dengan pembinaan aplikasi.\nRamai yang ingin memiliki aplikasi sendiri tetapi ramai yang tidak tahu berapa ringgit sebenarnya kos pembinaan sesebuah aplikasi ni.\nApa yang perlu kita bezakan adalah adakah kita membayar harga untuk memiliki aplikasi, atau kita membayar untuk mendapatkan perkhidmatan melalui aplikasi?\nKebanyakan daripada kita yang pernah \u0026ldquo;membeli\u0026rdquo; aplikasi, selalunya bukanlah mereka membeli hak pemilikan terhadap aplikasi tersebut, akan tetapi mereka hanyalah membeli perkhidmatan yang ditawarkan oleh aplikasi tersebut.\nSebagai contoh, kita membayar RM50 sebulan untuk aplikasi Netflix, dan kita dapat menonton rancangan-rancangan yang ditawarkan melalui aplikasi tersebut. Sama juga seperti perkhidmatan Grab, kita hanya perlu membayar RM10 untuk menggunakan kereta.\nDi sana juga ada aplikasi yang seolah-olah anda tidak perlu membayar apa-apa untuk menggunakannya. Contohnya, Instagram. Ada kena bayar apa-apa kalau nak guna? (Bayar dengan privasi anda 😭)\nPada tahun 2012, Facebook telah membeli Instagram dengan harga USD 1 bilion. Perlu difahami yang dibeli oleh Facebook bukan semata-mata kod sumber (source code) Instagram, akan tetapi segala yang dimiliki oleh syarikat Instagram termasuklah kod sumbernya sekali.\nJadi berapa harga untuk memiliki kod sumber sesebuah aplikasi?\nSaya pernah sentuh dalam hantaran sebelum ini. Kesimpulannya, ia bergantung kepada beberapa faktor. Antaranya adalah tahap kerumitan (complexity), siapa yang ingin membeli dan siapa yang ingin menjual.\nKeperluan pengguna (requirement) untuk kebanyakan pengguna Grab mudah dan jelas. Nak bergerak dari titik A ke titik B. Ini kategori mereka yang inginkan perkhidmatan. Harga selalunya kita boleh kata ini paling murah.\nSeterusnya ada pelanggan yang nak memiliki kereta yang sudah di mass produce. Ini harganya jelas. Harga bermula 30k-100k dah boleh memiliki kereta jenis ini.\nTapi ada juga pelanggan yang inginkan sesuatu yang lebih custom. Terutamanya pelanggan perniagaan (business customer). Analoginya, seolah-olah ada pelanggan yang nak beli food truck. Dan ini bukan sebarang food truck. Dia ada keperluan yang khusus (specific) untuk perniagaan dia sahaja. Dia nak food truck yang pelanggan boleh singgah dan pesan makanan, ada ruangan untuk simpan inventori yang extra panjang. Ada peti ais terbina sebab mereka menjual barangan yang perlukan penyejukan. Ada itu dan ini dan macam-macam lagi.\nSemakin custom permintaan, harga akan semakin tinggi.\nKesimpulan yang saya cuba sampaikan adalah, fahami betul-betul apa yang kita mahu.\nTak semua orang mampu memiliki aplikasi terutamanya aplikasi tersuai (custom).\nHabis tu tak kesian ke dekat SME atau peniaga-peniaga kecil yang tak mampu nak memiliki aplikasi ni?\nBerbalik kepada apa yang saya sebutkan tadi, kita perlu faham apa yang kita mahu dan apa yang tersedia di luar sana.\nSebagai pengguna, kita boleh pilih dari senarai berikut:\nBeli perkhidmatan melalui aplikasi siap dibina. Contoh: Netflix, Orderla.my, Facebook Ads, Instagram Ads. Beli perkhidmatan membuat aplikasi melalui aplikasi yang siap dibina. Contoh: Wordpress, Webflow, Glide Apps. Beli aplikasi yang telah siap dibina tetapi dengan fungsi yang tetap dan tidak tersuai. Contoh: Sistem Template dan Plugin Wordpress. Beli aplikasi tersuai (atau membeli perkhidmatan membuat aplikasi tersuai). Kita bayar freelancer atau syarikat untuk hasilkan mengikut keperluan khusus. Ini mahal, boleh jadi puluhan ribu, ratusan ribu, dan boleh mencecah juta. Secara peribadi, saya merasakan jurang antara no 2/3 dengan no 4 adalah agak besar. No 2/3 mungkin murah tapi learning curve agak tinggi dan sukar nak dapatkan hasil seperti no 4. AI (Kecerdasan buatan) mungkin boleh mengurangkan jurang ini satu masa nanti siapa tahu.\nSemakin hari semakin banyak syarikat yang mula mengeluarkan no-code platform (platform tanpa pengekodan). Saya pernah mencuba beberapa tapi masih belum berpuas hati. Masih belum boleh menggantikan pembangun aplikasi sepenuhnya.\nMoga-moga satu hari nanti ada produk yang boleh memenuhi kelompongan untuk mereka-mereka yang tak mampu nak memiliki aplikasi tersuai.\n","date":"10 February 2021","permalink":"/posts/20210210-memiliki-aplikasi-sendiri/","section":"Posts","summary":"Kalau saya tanya berapa harga kereta Myvi, mungkin ramai yang boleh beritahu saya harganya sekarang. Tetapi kalau saya tanya berapa harga kalau nak mintak kereta yang ada enjin Proton Preve, interior Honda City, sistem brek Perodua Myvi, dan gabungan beberapa lagi jenama lain, pasti sukar nak meneka harga.","title":"Memiliki Aplikasi Sendiri"},{"content":"Boleh ke cipta aplikasi tanpa pengekodan?\nBoleh sebenarnya.\nBeberapa perkhidmatan telah wujud sebelum ini dan sedikit sebanyak memberi impak kepada ruangan ini.\nWix Squarespace Webflow Wordpress Blogger Tapi kebanyakan perkhidmatan tersebut lebih memberi fokus kepada laman sesawang dengan kandungan statik dan juga bagi kategori yang terhad seperti e-dagang dan blog.\nBagaimana pula kalau kita nak cipta aplikasi yang lebih berbentuk internal tools atau alat dalaman seperti rekod kehadiran staf, laporan perbelanjaan ejen, sistem pengurusan calon temuduga kerja/latihan industri di syarikat, dan sebagainya?\nBoleh ke web aplikasi yang disenaraikan tadi memenuhi keperluan yang saya sebutkan ini?\nMemperkenalkan kepada anda satu kategori baharu dalam ruangan ini, iaitu platform pembuatan aplikasi tanpa pengekodan atau no-code/low-code development platform.\nSaya meletakkan kategori ini seolah-olah jika Google Sheets dan Wordpress berkahwin dan mendapat anak. Google Sheets semua orang tahu adalah perisian spreadsheet yang wujud di atas talian, dan Wordpress adalah perisian sumber terbuka yang memudahkan mereka yang bukan dari bidang teknikal atau pengekodan untuk menghasilkan laman sesawang sendiri.\nIni antara senarai servis yang boleh dimasukkan ke dalam kategori ini:\nAirtable Notion Coda Retool Clay Glide DronaHQ Parabola Google Sheets (sudah tentu\u0026hellip;) Senarai ini saya ambil dari ciapan di bawah. Anda boleh baca juga balasan-balasan pada ciapan tersebut untuk senarai tambahan perkhidmatan berkaitan #nocode atau #lowcode\nMy new job description: @airtable @NotionHQ @coda_hq @retoolapp @zapier configurator-as-a-service. Now accepting customers!\n\u0026mdash; Dhvanil (@dhvanilp) July 31, 2019 Dalam senarai tu semua saya dah cuba kecuali DronaHQ dan Parabola. Ada yang dah cuba secara mendalam, ada yang cuba secara permukaan sahaja.\nDalam pos yang akan datang saya akan tunjuk sedikit macamana servis ini boleh digunakan anda. Tak perlu ada latar belakang pengekodan pun.\nKalau ada permintaan mungkin dalam masa terdekat ni saya boleh anjurkan sesi FB live juga untuk ajar guna benda-benda ni.\n","date":"12 August 2019","permalink":"/posts/20190812-cipta-aplikasi-tanpa-pengekodan/","section":"Posts","summary":"Boleh ke cipta aplikasi tanpa pengekodan?\nBoleh sebenarnya.\nBeberapa perkhidmatan telah wujud sebelum ini dan sedikit sebanyak memberi impak kepada ruangan ini.\nWix Squarespace Webflow Wordpress Blogger Tapi kebanyakan perkhidmatan tersebut lebih memberi fokus kepada laman sesawang dengan kandungan statik dan juga bagi kategori yang terhad seperti e-dagang dan blog.","title":"Cipta aplikasi tanpa pengekodan"},{"content":" Saya terjebak dalam bidang kejuruteraan perisian ni antara sebabnya adalah waktu kecil saya banyak masa diluangkan dengan bermain permainan video.\n\u0026ldquo;Bang orang lain pun main game jugak tapi apsal tak terjebak dalam pengaturcaraan macam abang?\u0026rdquo;\nSaya pun tiap-tiap hari makan dan saya tak terjebak pun dalam dunia masakan.\nDalam hidup kita ni memang banyak benda yang kita jadi pengguna berbanding penghasil. Kita sedut oksigen, itu pengguna. Kita makan minum, itu pengguna. Kita beli kereta, itu pengguna. Semua tu ada la jugak benda yang kita hasilkan, macam karbon dioksida, sisa najis, dan resit pembelian. Tapi takkan itu sahaja?\nKita ada pilihan nak jadi sekadar pengguna atau nak jadi penghasil.\nKerajaan Malaysia melalui agensi-agensi seperti MDEC telah melakukan inisiatif-inisiatif yang sangat baik dalam melahirkan generasi yang boleh saya sebut di sini sebagai \u0026ldquo;digital makers\u0026rdquo; atau penghasil digital.\nTapi dalam masa yang sama ada juga pihak-pihak yang cuba push e-sukan (e-sports) jadi \u0026ldquo;mainstream\u0026rdquo; (arus perdana) seiring dengan inisiatif digital makers ni.\nKenapa digital makers ni bagus? Produktiviti. Kita menghasilkan produk. Itu hasil akhirnya. Produk boleh datangkan banyak manfaat pada agama, bangsa dan negara (klise). Boleh menyumbang dalam bidang kesihatan, sosial, kewangan, politik, ketenteraan dan apa-apa lagi lah. Analogi kemahiran digital ni kalau zaman dulu ibarat kemahiran menempa besi. Manfaat besi ni boleh guna pada pelbagai industri.\nOk sekarang cuba kita senaraikan manfaat e-sports. Ada yang bagi hujah \u0026ldquo;ala sama la manfaat macam sukan-sukan lain bang macam bola sepak apa semua tu. Kecoh lah bang.\u0026rdquo;\nKalau macam tu kita cuba bincang sukan bola ni apa pulak manfaat dia? Hujah paling kerap orang pakai, boleh menjana pendapatan. Selain daripada tu sukan bola membentuk budaya sihat. Yela sukan, keluar peluh apa semua sihat la kan. Sukan jugak membentuk budaya dan idola. Yang main wakil Malaysia mungkin 10-20 orang je, tapi yang ikut dan jadi peminat berjuta-juta orang. Kau minat Mohamed Salah, Messi, mesti petang-petang pun kau turun padang main bola jugak nak jadi macam mereka. Walaupun kebarangkalian kau nak menang ballon d\u0026rsquo;Or tak sampai 0.00001% sekurang2nya ada 99.99999% lagi kebarangkalian kau akan jadi sihat sebab main bola menyihatkan badan.\nJadi cuba kau bayangkan kalau e-sports ni jadi arus perdana. 0.0001% daripada yang mengikut mungkin la mendapat peluang pekerjaan. Yang 99.99999% dapat apa bro?\nBola ni kau main 2-3 jam kau dh stop. Ada jugak elemen ketagihan tapi penat. Nak ketagih pun tak larat. Dota Fortnite PES FIFA segala bagai kau main 13 jam pun tak rasa apa. Ketagih campur penat jari. Jari je penat bro.\nAda tak kau tengok budak-budak ponteng sekolah sebab ketagih nak main bola? Bola tu dah mainstream tu. E-sport yang belum lagi mainstream tu pun penuh dah kafe-kafe siber di kawasan-kawasan perumahan.\n\u0026ldquo;Hmm bias la bang. Ada je lagi manfaat lain. Jangan berat sebelah sangat bang.\u0026rdquo;\nManfaat lain kalau nak fikir lagi ada la lagi macam menjauhkan kau dari bahaya dadah. Tapi hujah ni aku simpan dulu dan aku taknak ulas kali ni.\nAda jugak yang bagi hujah \u0026ldquo;ala bang benda ni mewujudkan peluang pekerjaan\u0026rdquo;. Ok betul. Bidang pelacuran pun mewujudkan peluang pekerjaan jugak. Aku membesar-besarkan (exaggerate) je tapi kau paham la kan maksud aku.\nBila ditanya takpe ke nak arus perdana kan e-sport ni kau mesti akan dapat jawapan \u0026ldquo;ya sebab menjana pendapatan\u0026rdquo;. Hai asal buat duit je terus kena masukkan dalam pelan nasional ke?\n\u0026ldquo;Apa ni bang tadi kata nak digital makers kena buat game apa semua habis tu game dah siap tu siapa nak main?\u0026rdquo;\nHa bagus soalan ni.\nAku nak mencadangkan agar kita laraskan (adjust) sikit e-sports ni kalau korang berdegil jugak nak push. Sebab semua benda dalam dunia ni ada manfaat dia cuma kalau tak berhati-hati memang akan lagi banyak mudarat.\nSebelum kita nak arus perdanakan e-sports lebih baik kita cuba jawab persoalan-persoalan ni.\nE-sports (dalam bentuk sekarang) membentuk budaya pengguna tapi tidak membentuk budaya penghasil. Macamana nak halakan ke arah membentuk budaya penghasil? Aku pun takde idea sangat. Adakah kita nak buat pertandingan siapa boleh hasilkan game dengan lebih cepat? Live coding disaksikan jutaan kanak-kanak dan remaja satu Malaysia (atau satu dunia?) Kandungan (content) permainan yang lebih mendekatkan kita dengan jatidiri kita? Permainan video dengan tema perjuangan pembebasan tanah melayu daripada penjajahan? Tema pejuang2 islam terdahulu seperti mohamed alfatih, salahudin al ayyubi? Pertandingan congkak, batu seremban, wau bulan, konda kondi online? Fikir cara nak atasi masalah ketagihan. Mungkin melalui saluran undang-undang. Ketatkan undang-undang berkait kafe siber, waktu buka dan tutup, kandungan permainan yang dibenarkan dan sebagainya. Itu je la setakat ni yang aku terfikir.\nKalau kau ada pilihan nak habiskan masa sebagai pengguna atau penghasil, pilihlah penghasil sebab benda tu akan melahirkan generasi yang lebih kuat. Mungkin kita tak nampak sekarang. Tapi lagi 50 tahun, 100 tahun, 500 tahun ha banyak pahala kau dapat sebab niat kau nak bina generasi ni.\nApa-apa pun aku harap netizen tak kecam aku. Benda-benda nak viral ni memang kena ada elemen kontroversi sikit. Kepada kawan-kawan, sahabat-sahabat aku korang semua jangan risau kalau aku tweetpemes instapemes viral apa semua aku still akan ingat korang ok.\n\u0026ldquo;Bang jadi player dota pun kira penghasil gak bang. Boleh mengHASILkan sedutan video livestream perlawanan di saluran Youtube, Twitch dan sebagainya.\u0026rdquo;\nTak habis lagi kau. Ha silakanlah. Tapi tengah-tengah livestream kau tu selitkanlah tazkirah.\nSekian.\n","date":"13 October 2018","permalink":"/posts/20181013-e-sukan/","section":"Posts","summary":"Saya terjebak dalam bidang kejuruteraan perisian ni antara sebabnya adalah waktu kecil saya banyak masa diluangkan dengan bermain permainan video.\n\u0026ldquo;Bang orang lain pun main game jugak tapi apsal tak terjebak dalam pengaturcaraan macam abang?","title":"E-Sukan"},{"content":"Dalam hantaran yang lepas saya membawakan pada anda kisah kedai karipap. Ia sebenarnya adalah satu analogi untuk memudahkan saya menerangkan tentang pembinaan aplikasi.\nKali ini saya nak bawa konteks yang sama. Untuk membina sebuah kedai karipap, tentunya ada satu peringkat yang kita panggil sebagai merekabentuk. Salah satu dokumen kita akan hasilkan adalah pelan lantai.\nBegitu juga apabila membina sebuah aplikasi. Kita ada pelan lantai yang perlu dihasilkan.\nAda banyak jenis \u0026ldquo;pelan lantai\u0026rdquo; yang perlu dihasilkan. Antaranya aliran skrin antaramuka pengguna (UI screen flow), diagram skema pangkalan data, diagram infrastruktur, senibina sistem (sistem architecture) dan diagram kelas.\nDan untuk menghasilkan pelan-pelan ini tentulah perlu mengambil kira sumber yang diperlukan. Sesebuah pasukan pembina aplikasi boleh mengambil khidmat firma-firma atau perekabentuk bebas (freelance) yang boleh menghasilkan pelan tersebut, atau melantik seorang perekabentuk antaramuka pengguna secara tetap dalam pasukan mereka.\nMacam biasa soalan paling selalu orang tanya. Berapa kos nak buat pelan-pelan ni?\nOk kalau kita ambik satu contoh pelan, aliran skrin. Dengan anggapan rekabentuk antaramuka (UI Design) telah diselesaikan, dan ini hanyalah proses untuk rekabentuk interaksi (UX) sahaja, secara purata dan anggaran, berikut adalah jam yang diperlukan untuk menghasilkannya mengikut kerumitan.\nAplikasi mudah aka \u0026ldquo;simple\u0026rdquo;: 10 jam Aplikasi sederhana: 30 jam Aplikasi kompleks: 200 jam\nBergantung siapa yang anda upah, kos akan jadi berbeza.\nKalau harga RM50/jam, harga akan jadi sekitar RM500 sehingga RM10,000\nKalau harga RM100/jam, harga akan jadi sekitar RM1000 sehingga RM20,000\nKalau harga RM200/jam, harga akan jadi sekitar RM2000 sehingga RM40,000\nDan ini untuk hasilkan satu dokumen boleh serah (deliverable) sahaja. Tak masuk lagi bab pengaturcaraan, antaramuka pengguna, dokumentasi, latihan dan lain-lain lagi.\np/s: Kalau anda ada tajuk spesifik untuk siri #kedaikaripap yang seterusnya, boleh tulis di ruangan komen. tq.\n","date":"2 October 2018","permalink":"/posts/20181002-pelan-lantai/","section":"Posts","summary":"Dalam hantaran yang lepas saya membawakan pada anda kisah kedai karipap. Ia sebenarnya adalah satu analogi untuk memudahkan saya menerangkan tentang pembinaan aplikasi.\nKali ini saya nak bawa konteks yang sama.","title":"Pelan Lantai"},{"content":"Saya Rusman. Sekarang berkhidmat sebagai Pengurus Jabatan Pembangunan Produk (Engineering Manager + Product Manager) di Aeronerve.\n","date":"25 September 2018","permalink":"/about/","section":"rsmn","summary":"Saya Rusman. Sekarang berkhidmat sebagai Pengurus Jabatan Pembangunan Produk (Engineering Manager + Product Manager) di Aeronerve.","title":"Laman ini"},{"content":" \u0026ldquo;Bro boleh buatkan aku a simple app?\u0026rdquo;\nKali ni saya mahu kongsikan apakah anatomi sesebuah aplikasi.\nKebanyakan aplikasi mempunyai ciri-ciri asas yang sama.\nPengesahan (Authentication) # Senang cerita, sistem daftar akaun, log masuk, log keluar.\nKebenaran (Authorization) # Siapa boleh akses apa. Pentadbir (Administrator) mempunyai peranan (role) dan kebenaran (permission) yang lebih banyak daripada pengguna biasa. Contohnya, ruangan Dashboard hanya boleh diakses oleh Pentadbir sahaja.\nProfil dan Tetapan Pengguna (User Profile and Settings) # Setiap aplikasi akan ada ruangan untuk setiap pengguna menyimpan tetapan yang khusus untuk dirinya sahaja. Contohnya, sekiranya ada pengguna yang ingin berhenti daripada menerima notifikasi emel atau push daripada sistem. Di sini juga boleh tetapkan butiran pengguna seperti nama, email dan sebagainya.\nAntaramuka Pengguna (User Interface) # Bagaimana rupabentuk dan susun atur aplikasi anda.\nRekabentuk Icon (Icon Design) # Ikon yang mempesonakan lebih mudah menarik minat pengguna untuk memuat turun aplikasi\nAliran Pengalaman Pengguna (User Experience Flow) # Setelah pengguna daftar emel, adakah terus dibawa masuk ke dalam sistem atau perlu klik pautan untuk pengesahan emel dahulu atau bagaimana? Sebelum pengguna mendaftar akaun adakah anda mahu membenarkan mereka menggunakan aplikasi anda secara terhad atau wajib daftar kemudian baru boleh guna? Semua ini adalah perkara-perkara yang perlu diambil kira untuk memastikan keciciran sifar dan kepuasan pengguna yang maksimum.\nPlatform Pembayaran (Payment Gateway) # Sekiranya aplikasi anda ingin membolehkan pengguna membuat pembayaran, beberapa platform pembayaran terkemuka boleh diintegrasikan seperti BillPlz, iPay88, MOLPay, Braintree dan sebagainya.\nInventori (Inventory) # Setiap aplikasi akan mengandungi beberapa jenis inventori. Bagi aplikasi sistem pengurusan tadika, inventori adalah senarai pengguna, senarai ibubapa, senarai kelas, senarai kumpulan dan sebagainya.\nPenyegerakan (Synchronization) # Sekiranya aplikasi anda menyertakan sokongan pelbagai platform (mudah alih dan web), ciri ini sangat penting agar pengguna tidak mengakses maklumat yang lama iaitu sebelum ia dikemaskini.\nIntegrasi Peranti (Device Integration) # Ciri-ciri seperti Koordinat GPS, Kamera, Senarai kenalan (contacts) boleh dimanfaatkan pada peranti mudah alih.\nSistem Notifikasi # Untuk meningkatkan interaksi dengan pengguna, notifikasi boleh dimanfaatkan untuk menghantar mesej pendek secara percuma (tiada caj seperti SMS).\nPermesejan # Kebanyakan aplikasi moden turut menyertakan fungsi permesejan. Pengguna boleh menghantar mesej sesama mereka.\nAPI (Application Programming Interface) # Untuk membolehkan aplikasi peranti mudah alih untuk \u0026ldquo;bercakap\u0026rdquo; dengan pelayan, API adalah jawapannya.\nPembangunan dan Penyelenggaraan Infrastruktur Pelayan # Aplikasi yang dibina perlu dijalankan di atas infrastruktur yang kukuh. Aplikasi yang ingin menampung pengguna seramai 10 orang sudah tentu tidak sama dengan aplikasi yang ingin menampung 1,000,000 orang.\n","date":"23 September 2018","permalink":"/posts/20180923-anatomi-aplikasi/","section":"Posts","summary":"\u0026ldquo;Bro boleh buatkan aku a simple app?\u0026rdquo;\nKali ni saya mahu kongsikan apakah anatomi sesebuah aplikasi.\nKebanyakan aplikasi mempunyai ciri-ciri asas yang sama.\nPengesahan (Authentication) # Senang cerita, sistem daftar akaun, log masuk, log keluar.","title":"Anatomi Aplikasi"},{"content":"Seperti biasa jawapan paling selamat adalah, ia bergantung (it depends) pada hasil akhir yang ingin dicapai.\nKalau saya tanya anda nak buat rumah teres setingkat, boleh buat dengan tenaga seramai 1 orang? Tentulah boleh. Nak siap cepat atau lambat? Bergantung. Pada kemahiran, pada peralatan, dan sebagainya. Nak buat menara berkembar Petronas KLCC boleh buat 10 orang?***\nDan sudah tentu semua perkara ini akan menentukan kos akhir pembangunan aplikasi tersebut.\nSecara umum, sebuah aplikasi memerlukan kepakaran-kepakaran seperti di bawah. Perlukan yang mana, sekali lagi bergantung pada hasil akhir yang dikehendaki.\nPembangun Perisian/Jurutera Perisian/Pengaturcara (Software Developer/Software Engineer/Programmer)\nTugas mereka adalah membangunkan perisian/aplikasi tersebut. Dan ia juga boleh dipecahkan lagi kepada beberapa segmen. Ada yang kena jaga infrastruktur seperti pelayan (server) dan perkhidmatan awan (cloud services), ada yang kena jaga backend, pangkalan data (database), ada yang kena jaga frontend, antaramuka pengguna (user interface).\nPereka Antaramuka Pengguna/Pengalaman Pengguna (UI/UX Designer)\nKalau nak tau siapa yang bertanggungjawab atas setiap aliran penggunaan dan pengalaman, ikon, logo, dan rekaletak aplikasi yang anda gunakan sehari-hari, merekalah orangnya. Markah bonus kalau orang yang melakukan tugasan ini juga mempunyai kemahiran pengaturcaraan.\nPengurus Produk (Product Manager)\nTugas ini lebih kepada menentukan strategi, pelan tindakan, dan ciri (feature) aplikasi. Adakah sesuatu ciri itu perlu diutamakan berbanding ciri lain adalah di bawah tanggungjawab mereka.\nAda banyak lagi peranan lain yang saya tak masukkan di sini seperti Pereka Grafik (Graphic Designer), Animator, Pereka Watak (Character Artist/Designer), Penulis (Copywriter), Saintis Data (Data Scientist), atau Jurutera Pembelajaran Mesin (Machine Learning Engineer). Semua bergantung pada jenis aplikasi yang ingin dihasilkan. Untuk projek-projek seperti Aplikasi Permainan Video, Animasi, Aplikasi Simulasi, Aplikasi Pemprosesan Data dan sebagainya memerlukan lebih daripada yang saya sebutkan di atas. Itu tidak termasuk lagi peranan-peranan yang berkait dengan bahagian perniagaan dan pemasaran.\n***Whatsapp yang pada satu ketika mempunyai hampir 900 juta pengguna hanya mempunyai 50 orang Jurutera Perisian. Instagram ketika dibeli oleh Facebook hanya mempunyai 13 orang pekerja.\n","date":"22 September 2018","permalink":"/posts/20180922-pembangunan-aplikasi-perlu-berapa-ramai-orang/","section":"Posts","summary":"Seperti biasa jawapan paling selamat adalah, ia bergantung (it depends) pada hasil akhir yang ingin dicapai.\nKalau saya tanya anda nak buat rumah teres setingkat, boleh buat dengan tenaga seramai 1 orang?","title":"Pembangunan aplikasi perlu berapa ramai orang?"},{"content":"Umumnya bila sebut apps, orang akan terbayang perisian yang digunakan pada peranti mudah alih anda.\nTak semestinya. Aplikasi boleh dipasang dan dijalankan pada pelbagai platform.\nSecara mudahnya kita boleh bahagikan kepada beberapa kategori:\nAplikasi Mudah Alih Aplikasi Desktop Aplikasi Web Aplikasi Mudah Alih yang dominan di pasaran sekarang adalah aplikasi yang dimuat turun pada sistem operasi Android dan iOS. Contoh aplikasi mudah alih adalah Facebook for Android, Facebook for iOS, dan apa-apa lagi perisian yang anda jumpa di dalam Google Play Store atau Apple App Store. Beberapa tahun dahulu ada beberapa sistem operasi mudah alih yang lain seperti Windows Phone dan BlackBerry OS, tapi semakin lama semakin tidak mendapat tempat dalam pasaran.\nAplikasi Desktop adalah aplikasi pada laptop/desktop anda yang kebiasaannya memerlukan anda untuk memasangkannya (install) sebelum anda boleh menggunakannya. Contoh aplikasi desktop adalah Google Chrome, Adobe Illustrator, GIMP, Excel, Word dan sebagainya.\nAplikasi Web pula adalah aplikasi yang dijalankan pada pelayar web anda. Senang aplikasi web sebab tak perlu nak pasang (install) untuk anda menggunakannya. Tapi walaupun tak perlu pasang (install), anda kena daftar akaun selalunya. Lepas tu baru boleh guna. Contoh, facebook.com, twitter.com. Semua tu aplikasi web la tu.\nSetiap satu ni ada pros dan cons dia. Jadi kalau ada orang tanya \u0026ldquo;eh awak boleh buat apps tak?\u0026rdquo;, anda boleh terangkan macam kat atas ni, dan cuba fahami mana satu yang sebenarnya mereka mahu.\n","date":"21 September 2018","permalink":"/posts/20180921-anda-mahu-buat-aplikasi-apps/","section":"Posts","summary":"Umumnya bila sebut apps, orang akan terbayang perisian yang digunakan pada peranti mudah alih anda.\nTak semestinya. Aplikasi boleh dipasang dan dijalankan pada pelbagai platform.\nSecara mudahnya kita boleh bahagikan kepada beberapa kategori:","title":"Anda mahu buat aplikasi/apps?"},{"content":"Dua tiga minggu ni saya diberi kesempatan untuk mengajar sekumpulan pelajar satu subjek yang tidak disukai ramai iaitu pengaturcaraan (programming). Mereka ini rata-rata tidak mempunyai latar belakang programming.\nRuang kepakaran (domain expert) pelajar-pelajar saya ini adalah dalam bidang lain, iaitu biologi. Mereka belajar programming kerana mereka ada data-data yang sangat banyak, dan mereka ingin membangunkan sistem aplikasi yang boleh mengurus data-data ini.\nBila saya tengok muka-muka mereka waktu sesi pembelajaran tu, memang jelas terpancar di wajah mereka betapa mencabarnya nak belajar bendalah ni. Tapi mereka still boleh ikut. Mungkin kerana semangat juang yang tinggi.\nBelajar benda baru ni memanglah tidak mudah. Tips saya senang sahaja. Kalau nak tahu anda masih ‘on the right track’ atau tidak, pastikan dalam diri anda mesti ada perasaan tidak selesa, banyak tak tahu, rasa macam tak boleh nak belajar dan sebagainya. Kalau ada tanda-tanda tersebut, maka anda masih di atas jalan yang betul. Cuma yang membezakan orang yang gagal dengan orang yang berjaya, adalah keputusan yang dibuat oleh anda samada nak teruskan atau putus asa di tengah jalan.\nSaya belajar koding pun macam tu jugak. Bila nak mula belajar, rasa susah, rasa nak putus asa, tapi teruskan sahaja. Redah sahaja. Memang rasa tak best, rasa nak prokrastinasi, rasa nak layan perasaan.\nIngat sahaja tips saya. Kalau ada sedikit rasa uncomfortable, bermakna anda di trek yang betul. Yang penting, jalan terus ke depannn…\n","date":"20 September 2018","permalink":"/posts/20180920-belajar-benda-baharu/","section":"Posts","summary":"Dua tiga minggu ni saya diberi kesempatan untuk mengajar sekumpulan pelajar satu subjek yang tidak disukai ramai iaitu pengaturcaraan (programming). Mereka ini rata-rata tidak mempunyai latar belakang programming.\nRuang kepakaran (domain expert) pelajar-pelajar saya ini adalah dalam bidang lain, iaitu biologi.","title":"Belajar benda baharu"},{"content":"","date":"1 January 0001","permalink":"/authors/","section":"Authors","summary":"","title":"Authors"},{"content":"","date":"1 January 0001","permalink":"/categories/","section":"Categories","summary":"","title":"Categories"},{"content":"","date":"1 January 0001","permalink":"/series/","section":"Series","summary":"","title":"Series"}]